using Aggregator.Domain.Entities;
namespace Aggregator.Application.Abstractions;
public interface ITransactionsRepository{Task<IEnumerable<Transaction>> GetRecentAsync(int take,CancellationToken ct);Task<IEnumerable<(long AccountId,int Count,decimal Total)>> GetSummaryAsync(CancellationToken ct);Task<Transaction?> GetByIdAsync(long id,CancellationToken ct);Task<long> InsertAsync(Transaction txn,CancellationToken ct);Task<(int Count,decimal Total)> GetLast24hAsync(long accountId,CancellationToken ct);Task UpsertAccountAsync(long id,string country,CancellationToken ct);Task UpsertMerchantAsync(long id,string? country,CancellationToken ct);} 
public interface IFraudStore{Task InsertFeaturesAsync(long transactionId,long accountId,string json,CancellationToken ct);Task InsertScoreAsync(long transactionId,string modelVersion,double score,string[] reasonCodes,CancellationToken ct);Task InsertDecisionAsync(long transactionId,string decision,double threshold,CancellationToken ct);Task<object?> GetRiskAsync(long transactionId,CancellationToken ct);}
