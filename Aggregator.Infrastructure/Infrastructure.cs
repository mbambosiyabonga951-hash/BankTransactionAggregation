using System.Data; using Dapper; using Microsoft.Data.SqlClient;
using Aggregator.Application.Abstractions; using Aggregator.Domain.Entities;
namespace Aggregator.Infrastructure;
public interface IDbConnectionFactory{IDbConnection Create();}
public sealed class SqlConnectionFactory:IDbConnectionFactory{private readonly string _cs; public SqlConnectionFactory(string cs)=>_cs=cs; public IDbConnection Create()=>new SqlConnection(_cs);}
public sealed class TransactionsRepository:ITransactionsRepository{private readonly IDbConnectionFactory _f; public TransactionsRepository(IDbConnectionFactory f)=>_f=f;
public async Task<IEnumerable<Transaction>> GetRecentAsync(int take,CancellationToken ct){using var c=_f.Create(); return await c.QueryAsync<Transaction>($"SELECT TOP {take} * FROM dbo.Transactions ORDER BY CreatedUtc DESC");}
public async Task<IEnumerable<(long AccountId,int Count,decimal Total)>> GetSummaryAsync(CancellationToken ct){using var c=_f.Create(); return await c.QueryAsync<(long,int,decimal)>("SELECT AccountId, COUNT(*) Cnt, COALESCE(SUM(Amount),0) Total FROM dbo.Transactions GROUP BY AccountId ORDER BY Total DESC");}
public async Task<Transaction?> GetByIdAsync(long id,CancellationToken ct){using var c=_f.Create(); return await c.QuerySingleOrDefaultAsync<Transaction>("SELECT * FROM dbo.Transactions WHERE Id=@id", new { id });}
public async Task<long> InsertAsync(Transaction txn,CancellationToken ct){using var c=_f.Create(); return await c.ExecuteScalarAsync<long>("INSERT INTO dbo.Transactions(AccountId,MerchantId,Amount,Currency,Country,DeviceId,CreatedUtc) OUTPUT INSERTED.Id VALUES (@AccountId,@MerchantId,@Amount,@Currency,@Country,@DeviceId,@CreatedUtc)", txn);}
public async Task<(int Count,decimal Total)> GetLast24hAsync(long accountId,CancellationToken ct){using var c=_f.Create(); return await c.QueryFirstAsync<(int,decimal)>("SELECT CAST(COUNT(*) AS int), COALESCE(SUM(Amount),0) FROM dbo.Transactions WHERE AccountId=@accountId AND CreatedUtc>DATEADD(hour,-24,SYSUTCDATETIME())", new { accountId });}
public async Task UpsertAccountAsync(long id,string country,CancellationToken ct){using var c=_f.Create(); await c.ExecuteAsync("IF NOT EXISTS(SELECT 1 FROM dbo.Accounts WHERE Id=@id) INSERT INTO dbo.Accounts(ExternalRef,Country) VALUES (CONVERT(varchar(100),@id),@country)", new { id, country });}
public async Task UpsertMerchantAsync(long id,string? country,CancellationToken ct){using var c=_f.Create(); await c.ExecuteAsync("IF NOT EXISTS(SELECT 1 FROM dbo.Merchants WHERE Id=@id) INSERT INTO dbo.Merchants(Name,Country) VALUES (CONVERT(varchar(100),@id),@country)", new { id, country });}}
public sealed class FraudStore:IFraudStore{private readonly IDbConnectionFactory _f; public FraudStore(IDbConnectionFactory f)=>_f=f;
public async Task InsertFeaturesAsync(long t,long a,string j,CancellationToken ct){using var c=_f.Create(); await c.ExecuteAsync("INSERT INTO dbo.Fraud_FeatureSnapshots(TransactionId,AccountId,FeaturesJson) VALUES (@t,@a,@j)", new { t,a,j});}
public async Task InsertScoreAsync(long t,string m,double s,string[] r,CancellationToken ct){using var c=_f.Create(); await c.ExecuteAsync("INSERT INTO dbo.Fraud_Scores(TransactionId,ModelVersion,Score,ReasonCodes) VALUES (@t,@m,@s,@r)", new { t,m,s,r=string.Join(",",r)});}
public async Task InsertDecisionAsync(long t,string d,double th,CancellationToken ct){using var c=_f.Create(); await c.ExecuteAsync("INSERT INTO dbo.Fraud_Decisions(TransactionId,Decision,ThresholdUsed) VALUES (@t,@d,@th)", new { t,d,th});}
public async Task<object?> GetRiskAsync(long id,CancellationToken ct){using var c=_f.Create(); return await c.QueryFirstOrDefaultAsync("SELECT s.Score, d.Decision, s.ModelVersion FROM dbo.Fraud_Scores s LEFT JOIN dbo.Fraud_Decisions d ON d.TransactionId=s.TransactionId WHERE s.TransactionId=@id", new { id });}}
